{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "24386059-8c5c-4846-8bc5-f5b8c97670da",
   "metadata": {},
   "outputs": [],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import os\n",
    "import sys\n",
    "import yaml\n",
    "import numpy as np\n",
    "from PIL import Image, UnidentifiedImageError\n",
    "\n",
    "import torch\n",
    "from torch.utils.data import DataLoader\n",
    "from torchvision.datasets import ImageFolder\n",
    "import torchvision.transforms as tv_transforms\n",
    "import torchvision.models as tv_models\n",
    "\n",
    "import timm\n",
    "from timm.data import resolve_model_data_config, create_transform\n",
    "from tqdm import tqdm\n",
    "\n",
    "\n",
    "def pil_loader_with_error_handling(path: str):\n",
    "    try:\n",
    "        with open(path, \"rb\") as f:\n",
    "            img = Image.open(f)\n",
    "            return img.convert(\"RGB\")\n",
    "    except UnidentifiedImageError:\n",
    "        print(f\"Skipping file {path}: cannot identify image file.\")\n",
    "        return None\n",
    "\n",
    "\n",
    "def encodings_exist(model_dir: str) -> bool:\n",
    "    return (\n",
    "        os.path.exists(os.path.join(model_dir, \"encoded_images.npy\")) and\n",
    "        os.path.exists(os.path.join(model_dir, \"labels.npy\"))\n",
    "    )\n",
    "\n",
    "\n",
    "def load_saved_batches(model_dir: str):\n",
    "    ftmp = os.path.join(model_dir, \"features_temp.npy\")\n",
    "    ltmp = os.path.join(model_dir, \"labels_temp.npy\")\n",
    "    if os.path.exists(ftmp) and os.path.exists(ltmp):\n",
    "        return np.load(ftmp, allow_pickle=True), np.load(ltmp, allow_pickle=True)\n",
    "    return None, None\n",
    "\n",
    "\n",
    "def save_temp_batches(model_dir: str, features, labels):\n",
    "    np.save(os.path.join(model_dir, \"features_temp.npy\"), features, allow_pickle=True)\n",
    "    np.save(os.path.join(model_dir, \"labels_temp.npy\"), labels, allow_pickle=True)\n",
    "\n",
    "\n",
    "def delete_temp_batches(model_dir: str):\n",
    "    for name in [\"features_temp.npy\", \"labels_temp.npy\"]:\n",
    "        p = os.path.join(model_dir, name)\n",
    "        if os.path.exists(p):\n",
    "            os.remove(p)\n",
    "\n",
    "\n",
    "def get_model_and_transform(model_name: str, device: torch.device):\n",
    "    \"\"\"\n",
    "    alexnet -> torchvision (classifier = Identity, 224 transform)\n",
    "    others  -> timm (num_classes=0, global_pool='avg', per-model eval transform)\n",
    "    \"\"\"\n",
    "    if model_name == \"alexnet\":\n",
    "        model = tv_models.alexnet(weights=tv_models.AlexNet_Weights.DEFAULT)\n",
    "        model.classifier = torch.nn.Identity()\n",
    "        model.eval().to(device)\n",
    "        transform = tv_transforms.Compose([\n",
    "            tv_transforms.Resize((224, 224)),\n",
    "            tv_transforms.ToTensor(),\n",
    "            tv_transforms.Normalize(mean=[0.485, 0.456, 0.406],\n",
    "                                    std=[0.229, 0.224, 0.225]),\n",
    "        ])\n",
    "        return model, transform\n",
    "\n",
    "    model = timm.create_model(model_name, pretrained=True, num_classes=0, global_pool='avg')\n",
    "    model.eval().to(device)\n",
    "    cfg = resolve_model_data_config(model)\n",
    "    transform = create_transform(**cfg, is_training=False)\n",
    "    return model, transform\n",
    "\n",
    "\n",
    "def process_output(output: torch.Tensor, model_name: str) -> torch.Tensor:\n",
    "    if output.ndim == 4:\n",
    "        output = torch.nn.functional.adaptive_avg_pool2d(output, (1, 1))\n",
    "        output = output.view(output.size(0), -1)\n",
    "    elif output.ndim != 2:\n",
    "        raise ValueError(f\"{model_name}: unexpected output shape {tuple(output.shape)}\")\n",
    "    return output\n",
    "\n",
    "\n",
    "def encode_images(cfg: dict):\n",
    "    dataset_dir = cfg[\"dataset_dir\"]\n",
    "    encodings_dir = cfg[\"encodings_dir\"]\n",
    "    models = list(dict.fromkeys(cfg[\"models\"]))\n",
    "    bs = int(cfg.get(\"batch_size\", 32))\n",
    "    nw = int(cfg.get(\"num_workers\", 2))\n",
    "\n",
    "    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "\n",
    "    os.makedirs(encodings_dir, exist_ok=True)\n",
    "\n",
    "    base = ImageFolder(root=dataset_dir, transform=None, loader=pil_loader_with_error_handling)\n",
    "    valid_indices = [i for i, (p, _) in enumerate(base.samples) if base.loader(p) is not None]\n",
    "    print(f\"[encode] Valid images: {len(valid_indices)}\")\n",
    "\n",
    "    for model_name in models:\n",
    "        out_dir = os.path.join(encodings_dir, model_name)\n",
    "        if encodings_exist(out_dir):\n",
    "            print(f\"[encode] {model_name}: encodings already exist -> skip\")\n",
    "            continue\n",
    "\n",
    "        os.makedirs(out_dir, exist_ok=True)\n",
    "        print(f\"[encode] Building {model_name} ...\")\n",
    "        try:\n",
    "            model, transform = get_model_and_transform(model_name, device)\n",
    "        except Exception as e:\n",
    "            print(f\"[encode][WARN] init failed for '{model_name}': {e} -> skip\")\n",
    "            continue\n",
    "\n",
    "        ds = ImageFolder(root=dataset_dir, transform=transform, loader=pil_loader_with_error_handling)\n",
    "        subset = torch.utils.data.Subset(ds, valid_indices)\n",
    "        loader = DataLoader(\n",
    "            subset, batch_size=bs, shuffle=False,\n",
    "            num_workers=nw, pin_memory=torch.cuda.is_available()\n",
    "        )\n",
    "\n",
    "        all_feats, all_labels = [], []\n",
    "        f_prev, l_prev = load_saved_batches(out_dir)\n",
    "        if f_prev is not None and l_prev is not None:\n",
    "            all_feats, all_labels = list(f_prev), list(l_prev)\n",
    "            print(f\"[encode] Resuming cached batches for {model_name}\")\n",
    "\n",
    "        for images, labels in tqdm(loader, desc=f\"encode:{model_name}\"):\n",
    "            images = images.to(device, non_blocking=True)\n",
    "            with torch.no_grad():\n",
    "                feats = process_output(model(images), model_name)\n",
    "            all_feats.append(feats.cpu().numpy())\n",
    "            all_labels.extend(labels.numpy())\n",
    "            save_temp_batches(out_dir,\n",
    "                              np.array(all_feats, dtype=object),\n",
    "                              np.array(all_labels, dtype=object))\n",
    "\n",
    "        X = np.concatenate(all_feats, axis=0) if len(all_feats) else np.empty((0,))\n",
    "        y = np.array(all_labels)\n",
    "\n",
    "        print(f\"[encode] {model_name} -> X{X.shape}, y{y.shape}\")\n",
    "        np.save(os.path.join(out_dir, \"encoded_images.npy\"), X)\n",
    "        np.save(os.path.join(out_dir, \"labels.npy\"), y)\n",
    "        delete_temp_batches(out_dir)\n",
    "        print(f\"[encode] {model_name}: done.\")\n",
    "\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    if len(sys.argv) != 2:\n",
    "        print(\"Usage: python encode.py config.yaml\")\n",
    "        sys.exit(1)\n",
    "    with open(sys.argv[1], \"r\") as f:\n",
    "        cfg = yaml.safe_load(f)\n",
    "    encode_images(cfg)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
